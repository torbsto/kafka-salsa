/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package de.hpi.msd.salsa.serde.avro;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class AdjacencyList extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -7198688206390487726L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"AdjacencyList\",\"namespace\":\"de.hpi.msd.salsa.serde.avro\",\"fields\":[{\"name\":\"leftId\",\"type\":\"long\"},{\"name\":\"neighbors\",\"type\":{\"type\":\"array\",\"items\":\"long\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<AdjacencyList> ENCODER =
      new BinaryMessageEncoder<AdjacencyList>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<AdjacencyList> DECODER =
      new BinaryMessageDecoder<AdjacencyList>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<AdjacencyList> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<AdjacencyList> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<AdjacencyList>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this AdjacencyList to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a AdjacencyList from a ByteBuffer. */
  public static AdjacencyList fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public long leftId;
  @Deprecated public java.util.List<java.lang.Long> neighbors;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public AdjacencyList() {}

  /**
   * All-args constructor.
   * @param leftId The new value for leftId
   * @param neighbors The new value for neighbors
   */
  public AdjacencyList(java.lang.Long leftId, java.util.List<java.lang.Long> neighbors) {
    this.leftId = leftId;
    this.neighbors = neighbors;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return leftId;
    case 1: return neighbors;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: leftId = (java.lang.Long)value$; break;
    case 1: neighbors = (java.util.List<java.lang.Long>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'leftId' field.
   * @return The value of the 'leftId' field.
   */
  public java.lang.Long getLeftId() {
    return leftId;
  }

  /**
   * Sets the value of the 'leftId' field.
   * @param value the value to set.
   */
  public void setLeftId(java.lang.Long value) {
    this.leftId = value;
  }

  /**
   * Gets the value of the 'neighbors' field.
   * @return The value of the 'neighbors' field.
   */
  public java.util.List<java.lang.Long> getNeighbors() {
    return neighbors;
  }

  /**
   * Sets the value of the 'neighbors' field.
   * @param value the value to set.
   */
  public void setNeighbors(java.util.List<java.lang.Long> value) {
    this.neighbors = value;
  }

  /**
   * Creates a new AdjacencyList RecordBuilder.
   * @return A new AdjacencyList RecordBuilder
   */
  public static de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder newBuilder() {
    return new de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder();
  }

  /**
   * Creates a new AdjacencyList RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new AdjacencyList RecordBuilder
   */
  public static de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder newBuilder(de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder other) {
    return new de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder(other);
  }

  /**
   * Creates a new AdjacencyList RecordBuilder by copying an existing AdjacencyList instance.
   * @param other The existing instance to copy.
   * @return A new AdjacencyList RecordBuilder
   */
  public static de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder newBuilder(de.hpi.msd.salsa.serde.avro.AdjacencyList other) {
    return new de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder(other);
  }

  /**
   * RecordBuilder for AdjacencyList instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<AdjacencyList>
    implements org.apache.avro.data.RecordBuilder<AdjacencyList> {

    private long leftId;
    private java.util.List<java.lang.Long> neighbors;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.leftId)) {
        this.leftId = data().deepCopy(fields()[0].schema(), other.leftId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.neighbors)) {
        this.neighbors = data().deepCopy(fields()[1].schema(), other.neighbors);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing AdjacencyList instance
     * @param other The existing instance to copy.
     */
    private Builder(de.hpi.msd.salsa.serde.avro.AdjacencyList other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.leftId)) {
        this.leftId = data().deepCopy(fields()[0].schema(), other.leftId);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.neighbors)) {
        this.neighbors = data().deepCopy(fields()[1].schema(), other.neighbors);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'leftId' field.
      * @return The value.
      */
    public java.lang.Long getLeftId() {
      return leftId;
    }

    /**
      * Sets the value of the 'leftId' field.
      * @param value The value of 'leftId'.
      * @return This builder.
      */
    public de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder setLeftId(long value) {
      validate(fields()[0], value);
      this.leftId = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'leftId' field has been set.
      * @return True if the 'leftId' field has been set, false otherwise.
      */
    public boolean hasLeftId() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'leftId' field.
      * @return This builder.
      */
    public de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder clearLeftId() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'neighbors' field.
      * @return The value.
      */
    public java.util.List<java.lang.Long> getNeighbors() {
      return neighbors;
    }

    /**
      * Sets the value of the 'neighbors' field.
      * @param value The value of 'neighbors'.
      * @return This builder.
      */
    public de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder setNeighbors(java.util.List<java.lang.Long> value) {
      validate(fields()[1], value);
      this.neighbors = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'neighbors' field has been set.
      * @return True if the 'neighbors' field has been set, false otherwise.
      */
    public boolean hasNeighbors() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'neighbors' field.
      * @return This builder.
      */
    public de.hpi.msd.salsa.serde.avro.AdjacencyList.Builder clearNeighbors() {
      neighbors = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public AdjacencyList build() {
      try {
        AdjacencyList record = new AdjacencyList();
        record.leftId = fieldSetFlags()[0] ? this.leftId : (java.lang.Long) defaultValue(fields()[0]);
        record.neighbors = fieldSetFlags()[1] ? this.neighbors : (java.util.List<java.lang.Long>) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<AdjacencyList>
    WRITER$ = (org.apache.avro.io.DatumWriter<AdjacencyList>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<AdjacencyList>
    READER$ = (org.apache.avro.io.DatumReader<AdjacencyList>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
