## schema-registry repository
image: "confluentinc/cp-schema-registry"
## The container tag to use
imageTag: 5.0.1
## Specify a imagePullPolicy
## ref: http://kubernetes.io/docs/user-guide/images/#pre-pulling-images
imagePullPolicy: "IfNotPresent"

## Number of Schema Registry Pods to Deploy
replicaCount: 1

## Schema Registry Settings Overrides
## Configuration Options can be found here: https://docs.confluent.io/current/schema-registry/docs/config.html
configurationOverrides: {}
  ## The default master.eligiblity is true
# master.eligibility: false

## Custom pod annotations
podAnnotations: {}

## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
## Confluent has production deployment guidelines here:
## ref: https://github.com/confluentinc/schema-registry/blob/master/docs/deployment.rst
##
resources: {}
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
#  memory: 128Mi

## The port on which the SchemaRegistry will be available and serving requests
servicePort: 8081

## Provides schema registry service settings
service:
  ## Any additional labels to add to the service
  labels: {}

## If `Kafka.Enabled` is `false`, kafkaStore.overrideBootstrapServers must be provided for Master Election.
## You can list load balanced service endpoint, or list of all brokers (which is hard in K8s).  e.g.:
## overrideBootstrapServers: "PLAINTEXT://dozing-prawn-kafka-headless:9092"
## Charts uses Kafka Coordinator Master Election: https://docs.confluent.io/current/schema-registry/docs/design.html#kafka-coordinator-master-election
kafkaStore:
  overrideBootstrapServers: "PLAINTEXT://kafka:9092"
  # By Default uses Release Name, but can be overridden.  Which means each release is its own group of
  # Schema Registry workers.  You can have multiple groups talking to same Kafka Cluster
  overrideGroupId: ""
  ## Additional Java arguments to pass to Kafka.
  # schemaRegistryOpts: -Dfoo=bar

## Readiness probe config.
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-probes/
##
readinessProbe:
  initialDelaySeconds: 10
  periodSeconds: 10
  timeoutSeconds: 5
  successThreshold: 1
  failureThreshold: 3

# Options for connecting to SASL kafka brokers
sasl:
  configPath: "/etc/kafka-config"
  scram:
    enabled: false
    init:
      image: "confluentinc/cp-schema-registry"
      imageTag: "5.0.1"
      imagePullPolicy: "IfNotPresent"
    clientUser: "kafka-client"
    zookeeperClientUser: "zookeeper-client"
    # Passwords can be either provided here or pulled from an existing k8s secret.
    # If user wants to specify the password here:
    clientPassword: "client-password"
    zookeeperClientPassword: "zookeeper-client-password"
    # If user has an existing k8s secret they would like to use instead of generating them:
    # useExistingSecret:
    #   # Where to find the schema registry user secret
    #   clientPassword:
    #     secretKeyRef:
    #       name: "schema-reg-secret"
    #       key: "client-password"
    #   # Where to find the zookeeper user secret
    #   zookeeperClientPassword:
    #     secretKeyRef:
    #       name: "zookeeper-secret"
    #       key: "zokeeper-client-password"

## Kafka Settings
kafka:
  ## This is enabled only to allow installations of this chart without arguments
  enabled: false

## Provides schema registry ingress settings
ingress:
  ## If true provide ingress to the schema registry
  enabled: false

## External Nodeport/LoadBalancer for Cloud Providers
external:
  enabled: true
  type: LoadBalancer
  servicePort: 8081
  loadBalancerIP: ${SR_IP}

## Provide JMX Port
jmx:
  enabled: true
  port: 5555

## Prometheus Exporter Configuration
## ref: https://prometheus.io/docs/instrumenting/exporters/
prometheus:
  ## JMX Exporter Configuration
  ## ref: https://github.com/prometheus/jmx_exporter
  jmx:
    enabled: false
    image: solsson/kafka-prometheus-jmx-exporter@sha256
    imageTag: 6f82e2b0464f50da8104acd7363fb9b995001ddff77d248379f8788e78946143
    port: 5556
    resources: {}
      # limits:
      #  cpu: 100m
      #  memory: 128Mi
      # requests:
      #  cpu: 100m
    #  memory: 128Mi

## Pass any secrets to the pods. The secrets will be mounted to a specfic path
## OR presented as Environment Variables. Environment variable names are
## generated as: `<secretName>_<secretKey>` (All upper case)
## note: Keystore/Truststore are binary and should always be presented as files.
secrets: []
# - name: schema-registry-jks
#   keys:
#     - ksr-server.truststore.jks
#     - ksr-server.keystore.jks
#   mountPath: /secrets
# - name: schema-registry-jks-pw
#   keys:
#     - ssl_truststore_password
#     - ssl_keystore_password
#     - ssl_key_password
